# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/98_basic_hydro_functions.ipynb.

# %% auto 0
__all__ = ['load_water_properties', 'calc_salinity', 'dynamic_viscosity', 'kinematic_viscosity_fn', 'reynolds_number_fn',
           'froude_number_fn', 'CF_fn', 'roughness_resistance_fn', 'calculate_form_factor',
           'calculate_viscous_resistance_coef', 'calculate_total_resistance_coef', 'wetted_surface_area', 'air_density']

# %% ../nbs/98_basic_hydro_functions.ipynb 4
import numpy as np
import pandas as pd
from fastcore.test import *
import pkgutil
from io import BytesIO
from seawater import dens
from seawater.library import T90conv

# %% ../nbs/98_basic_hydro_functions.ipynb 6
def load_water_properties() -> pd.DataFrame:
    """loads a 2D lookup table of water dynamic viscosity

    Returns:
        pd.DataFrame: dataframe of water properties
    """    
    water_properties = pkgutil.get_data('pyseatrials', 'water_properties/dyn_visc.parquet')
    water_properties_df = pd.read_parquet(BytesIO(water_properties))
    
    return water_properties_df

# %% ../nbs/98_basic_hydro_functions.ipynb 8
def calc_salinity(measured_density:float, #measured water density [kg/m3]
                  measured_temperature:float #measured water temperature [degC]
                  ) -> float:
    """calculate water salinity from density and temperature using UNESCO 1983 (EOS 80) polynomial

    Args:
        measured_density (float): measured water density
        measured_temperature (float): measured water temperature

    Returns:
        float: water salinity
    """    
    s = np.arange(0, 40, 0.02) #salinity
    t = T90conv(np.ones(len(s))*measured_temperature) #temperature
    p = np.zeros(len(s)) #pressure (sea level)

    salinity_calc = pd.DataFrame({'salinity':s, 'residual':np.abs((dens(s, t, p) - (np.ones(len(s)) * measured_density)))})
    salinity = salinity_calc.loc[salinity_calc['residual']==salinity_calc['residual'].min(), 'salinity']
    out = np.around(salinity.item(), 3)
    
    return out 

# %% ../nbs/98_basic_hydro_functions.ipynb 10
def dynamic_viscosity(salinity:float, #A positive value of the water salinity [g/kg]
                      temperature:float #The temperature in celsius [C]
                     )->float: #returns values in [kg/ms]
    
    "Calculate the dynamic viscosity dependent on temperature and salinity"
    
    mu_w = 4.2844*10**(-5) + 1/(0.157*(temperature + 64.993)**2 - 91.296)
    
    A = 1.541 + 1.998 * temperature * 10**(-2) - 9.52 * temperature**2 * 10 ** (-5)
    B = 7.974 - 7.561 * temperature * 10**(-2) - 7.724 * temperature**2 * 10 ** (-4)
    
    return mu_w * (1 + A*salinity + B*salinity**2)

# %% ../nbs/98_basic_hydro_functions.ipynb 19
def kinematic_viscosity_fn(dynamic_viscosity:float = 1.18e-3, #This value is typically 1.18e-3 [kg/(ms)]
                          water_density:float = 1026 #The density of water under current conditions [kg/m^3]
                         )-> float: #[m^2/s]
    
    "A simple wrapper calculating the ratio of dynamic viscosity and water density"
    
    return dynamic_viscosity/water_density
    

# %% ../nbs/98_basic_hydro_functions.ipynb 26
def reynolds_number_fn(stw:float, #Speed through water [m/s]
                      length:float, #Length of the vessel, $L_{os}$ Length overall submerged is typically used [m]
                      kinematic_viscosity:float # [m^2/s]
                      )->float: # Reynolds number is dimensionless
    
    "The Reynolds number is a element of fluid dynamics and is often used to predict whether flow is laminar or turbulent"
    
    return stw * length / kinematic_viscosity
    
    

# %% ../nbs/98_basic_hydro_functions.ipynb 31
def froude_number_fn(stw:float, #speed through water [m/s]
                    length:float,#Length of vessel, typically $L_{wl}$ Length of waterline [m]
                    gravity:float = 9.81 #acceleration due to gravity [m/s^2]
                    )-> float : #The Froude number is a dimensionless value
    
    "The Froude number is useful for calculating the water resistance"
    
    return stw/np.sqrt(gravity * length)

# %% ../nbs/98_basic_hydro_functions.ipynb 36
def CF_fn(reynolds_number:float, #indicating the type of flow of the water
          c1:float = 0.075, # An adjustment value dault from ITTC-1957
          c2:float = 0 #An adjustment value the default is 0
      )-> float: #This is a dimensionaless value
    
    "An essential part of calculating the resistance experienced by the ship"
    
    return c1 / (np.log10(reynolds_number) -2) ** 2   + c2
    

# %% ../nbs/98_basic_hydro_functions.ipynb 40
def roughness_resistance_fn(
                          length:float, #Length of the vessel at waterline [m]
                          reynolds_number:float, # dimensionless value describing flow properties
                          surface_roughness:float = 150e-6, #The default value is outdated an modern hull covering are likely considerably less rough [m]
                          )-> float: # The dimensionless friction factor representing surface roughness of the hull
    
    """ 
    The function CF_fn calculates a dimensionless value representing the resistance experienced by a ship based on the given parameters.
    """

    ratio_value = surface_roughness / length
    return (11/250)* (ratio_value**(1/3) - 10 * reynolds_number**(-1/3)) + (1/8e3)
    

# %% ../nbs/98_basic_hydro_functions.ipynb 44
def calculate_form_factor(C_B: float, # The block coefficient
                          B: float, #Beam of the vessel [m]
                          L_pp: float, #The length between perpendiculars [m]
                          T_M: float #The draught at midship [m]
                          ) -> float: #The dimensionless form factor for the ship
    """
    The function `calculate_form_factor` calculates the dimensionless form factor (1+k) for a ship using the Gross & Watanabe method.
    """
    k = 1.017 + 20 * C_B * (B / L_pp)**2 * (T_M / B)**0.5
    return k


# %% ../nbs/98_basic_hydro_functions.ipynb 48
def calculate_viscous_resistance_coef(C_F: float, #The frictional correlation coefficient
                                 form_factor: float, #The form factor (1+k)
                                 delta_C_F: float #The roughness resistance coefficient
                                 ) -> float: #The coefficient of viscous friction
    """
    The function `calculate_viscous_resistance_coef` calculates the dimensionless viscous resistance coefficient for a vessel based on the given parameters.
    """
    return 1.06 * C_F * form_factor + delta_C_F

# %% ../nbs/98_basic_hydro_functions.ipynb 55
def calculate_total_resistance_coef(total_resistance:float, #The total resistive force experienced by the ship [N]
                                    stw:float, #The speed through water of the ship [m/s]
                                    wsa:float, #The wetted surface area of the ship [m^2]
                                    water_density:float = 1026 #The desnity of seawater [kg/m^3]
                                    )->float: #The dimensionless coefficient of total resistance of the ship
    
    """ 
    The function `calculate_total_resistance_coef` calculates the dimensionless coefficient of total resistance for a ship based on the given parameters.
    """

    denominator = 0.5 * water_density * wsa * stw**2

    return total_resistance/denominator 

# %% ../nbs/98_basic_hydro_functions.ipynb 59
def wetted_surface_area(draft: float, #The draft of the ship [m]
                        beam: float, # The beam of the ship [m]
                        length: float, # The length of the ship [m]
                        midship_section_coeff: float, # The midship section coefficient [none]
                        block_coeff: float, #The block coefficient [none]
                        waterplane_area_coeff: float, # The waterplane area coefficient [none]
                        transverse_sectional_area: float #The transverse sectional area of the bulb [m^2]
                        )->float:  # The wetted surface area of the ship [m^2]
    """
    The function `wetted_surface_area` calculates the wetted surface area of a ship using the Hotropp-Mennen formula.

    """

    wetted_surface_area = length * (2 * draft + beam) * np.sqrt(midship_section_coeff) * (0.453 + 0.4425 * block_coeff - 0.2862 * midship_section_coeff - 0.003467 * (beam / draft) + 0.3696 * waterplane_area_coeff) + 2.38 * (transverse_sectional_area / block_coeff)

    return wetted_surface_area

# %% ../nbs/98_basic_hydro_functions.ipynb 62
def air_density(P:float, #air pressure in mbar
                T:float, #air temperature in degC
                RH:float #air relative humidity as %
                ):
    """Calculate air density based on https://icoads.noaa.gov/software/other/profs

    Args:
        P (float): Air pressure in mbar
        T (float): Air temperature in degC
        RH (float): Air relative humidity
    """
    Ppa = P * 100 #convert from mbar to PA
    Tk = T + 273.15 #air temp in Kelvin
    
    Rd = 287.058 #gas constant for dry air J/(kg.K)
    Rv = 461.495  #gas constant for water vapour J/(kg.K)
    
    Eso = 6.1078
    c0 = 0.99999683
    c1 = -0.90826951*10**-2
    c2 = 0.78736169*10**-4
    c3 = -0.61117958*10**-6
    c4 = 0.43884187*10**-8
    c5 = -0.29883885*10**-10
    c6 = 0.21874425*10**-12
    c7 = -0.17892321*10**-14
    c8 = 0.11112018*10**-16
    c9 = -0.30994571*10**-19
    p = c0+T*(c1+T*(c2+T*(c3+T*(c4+T*(c5+T*(c6+T*(c7+T*(c8+T*(c9)))))))))
    Es = Eso/(p**8)

    pv = Es * RH
    pd = Ppa - pv
    rho = (pd / (Rd * Tk)) + (pv / (Rv * Tk))
    
    return rho
