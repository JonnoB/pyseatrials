# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/98_basic_hydro_functions.ipynb.

# %% auto 0
__all__ = ['dynamic_viscosity', 'kinematic_viscosity_fn', 'reynolds_number_fn', 'froude_number_fn', 'CF_fn',
           'roughness_resistance_fn', 'calculate_form_factor', 'calculate_viscous_resistance_coef',
           'wetted_surface_area']

# %% ../nbs/98_basic_hydro_functions.ipynb 4
import numpy as np
import pandas as pd
from fastcore.test import *

# %% ../nbs/98_basic_hydro_functions.ipynb 6
def dynamic_viscosity(salinity:float, #A positive value of the water salinity [g/kg]
                      temperature:float #The temperature in celsius [C]
                     )->float: #returns values in [kg/ms]
    
    "Calculate the dynamic viscosity dependent on temperature and salinity"
    
    mu_w = 4.2844*10**(-5) + 1/(0.157*(temperature + 64.993)**2 - 91.296)
    
    A = 1.541 + 1.998 * temperature * 10**(-2) - 9.52 * temperature**2 * 10 ** (-5)
    B = 7.974 - 7.561 * temperature * 10**(-2) - 7.724 * temperature**2 * 10 ** (-4)
    
    return mu_w * (1 + A*salinity + B*salinity**2)

# %% ../nbs/98_basic_hydro_functions.ipynb 15
def kinematic_viscosity_fn(dynamic_viscosity:float = 1.18e-3, #This value is typically 1.18e-3 [kg/(ms)]
                          water_density:float = 1026 #The density of water under current conditions [kg/m^3]
                         )-> float: #[m^2/s]
    
    "A simple wrapper calculating the ratio of dynamic viscosity and water density"
    
    return dynamic_viscosity/water_density
    

# %% ../nbs/98_basic_hydro_functions.ipynb 22
def reynolds_number_fn(stw:float, #Speed through water [m/s]
                      length:float, #Length of the vessel, $L_{os}$ Length overall submerged is typically used [m]
                      kinematic_viscosity:float # [m^2/s]
                      )->float: # Reynolds number is dimensionless
    
    "The Reynolds number is a element of fluid dynamics and is often used to predict whether flow is laminar or turbulent"
    
    return stw * length / kinematic_viscosity
    
    

# %% ../nbs/98_basic_hydro_functions.ipynb 27
def froude_number_fn(stw:float, #speed through water [m/s]
                    length:float,#Length of vessel, typically $L_{wl}$ Length of waterline [m]
                    gravity:float = 9.81 #acceleration due to gravity [m/s^2]
                    )-> float : #The Froude number is a dimensionless value
    
    "The Froude number is useful for calculating the water resistance"
    
    return stw/np.sqrt(gravity * length)

# %% ../nbs/98_basic_hydro_functions.ipynb 32
def CF_fn(reynolds_number:float, #indicating the type of flow of the water
          c1:float = 0.075, # An adjustment value dault from ITTC-1957
          c2:float = 0 #An adjustment value the default is 0
      )-> float: #This is a dimensionaless value
    
    "An essential part of calculating the resistance experienced by the ship"
    
    return c1 / (np.log10(reynolds_number) -2) ** 2   + c2
    

# %% ../nbs/98_basic_hydro_functions.ipynb 36
def roughness_resistance_fn(
                          length:float, #Length of the vessel at waterline [m]
                          reynolds_number:float, # dimensionless value describing flow properties
                          surface_roughness:float = 150e-6, #The default value is outdated an modern hull covering are likely considerably less rough [m]
                          )-> float: #
    
    ratio_value = surface_roughness / length
    return (11/250)* (ratio_value**(1/3) - 10 * reynolds_number**(-1/3)) + (1/8e3)
    

# %% ../nbs/98_basic_hydro_functions.ipynb 40
def calculate_form_factor(C_B: float, B: float, L_pp: float, T_M: float) -> float:
    """
    Calculate the form factor (1+k) using Gross & Watanabe method.
    
    Args:
    C_B (float): Block coefficient
    B (float): Beam of the ship
    L_pp (float): Length between perpendiculars
    T_M (float): Draught at midship
    
    Returns:
    float: Form factor (1+k)
    """
    k = 1.017 + 20 * C_B * (B / L_pp)**2 * (T_M / B)**0.5
    return k


# %% ../nbs/98_basic_hydro_functions.ipynb 44
def calculate_viscous_resistance_coef(C_F: float, #The frictional correlation coefficient
                                 form_factor: float, #The form factor (1+k)
                                 delta_C_F: float #The roughness resistance coefficient
                                 ) -> float: #The coefficient of viscous friction
    """Calculates the viscous resistance coefficient for a vessel.
    """
    return 1.06 * C_F * form_factor + delta_C_F * C_F

# %% ../nbs/98_basic_hydro_functions.ipynb 51
def wetted_surface_area(draft: float, #The draft of the ship [m]
                        beam: float, # The beam of the ship [m]
                        length: float, # The length of the ship [m]
                        midship_section_coeff: float, # The midship section coefficient [none]
                        block_coeff: float, #The block coefficient [none]
                        waterplane_area_coeff: float, # The waterplane area coefficient [none]
                        transverse_sectional_area: float #The transverse sectional area of the bulb [m^2]
                        )->float:  # The wetted surface area of the ship [m^2]
    """
    Calculates the wetted surface area of a ship using the Hotropp-Mennen formula.
    """

    wetted_surface_area = length * (2 * draft + beam) * np.sqrt(midship_section_coeff) * (0.453 + 0.4425 * block_coeff - 0.2862 * midship_section_coeff - 0.003467 * (beam / draft) + 0.3696 * waterplane_area_coeff) + 2.38 * (transverse_sectional_area / block_coeff)

    return wetted_surface_area
