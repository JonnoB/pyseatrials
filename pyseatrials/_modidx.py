# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/pyseatrials',
                'doc_host': 'https://JonnoB.github.io',
                'git_url': 'https://github.com/JonnoB/pyseatrials',
                'lib_path': 'pyseatrials'},
  'syms': { 'pyseatrials.basic': { 'pyseatrials.basic.CF_fn': ('basic_hydro_functions.html#cf_fn', 'pyseatrials/basic.py'),
                                   'pyseatrials.basic.dynamic_viscosity': ( 'basic_hydro_functions.html#dynamic_viscosity',
                                                                            'pyseatrials/basic.py'),
                                   'pyseatrials.basic.froude_number_fn': ( 'basic_hydro_functions.html#froude_number_fn',
                                                                           'pyseatrials/basic.py'),
                                   'pyseatrials.basic.kinematic_viscosity_fn': ( 'basic_hydro_functions.html#kinematic_viscosity_fn',
                                                                                 'pyseatrials/basic.py'),
                                   'pyseatrials.basic.reynolds_number_fn': ( 'basic_hydro_functions.html#reynolds_number_fn',
                                                                             'pyseatrials/basic.py'),
                                   'pyseatrials.basic.roughness_allowence_fn': ( 'basic_hydro_functions.html#roughness_allowence_fn',
                                                                                 'pyseatrials/basic.py')},
            'pyseatrials.current': { 'pyseatrials.current.estimate_speed_through_water': ( 'current.html#estimate_speed_through_water',
                                                                                           'pyseatrials/current.py')},
            'pyseatrials.general': { 'pyseatrials.general.knots_to_ms': ('general_functions.html#knots_to_ms', 'pyseatrials/general.py'),
                                     'pyseatrials.general.load_datasets': ( 'general_functions.html#load_datasets',
                                                                            'pyseatrials/general.py'),
                                     'pyseatrials.general.ms_to_knots': ('general_functions.html#ms_to_knots', 'pyseatrials/general.py'),
                                     'pyseatrials.general.temp_salinity_water_resistance': ( 'general_functions.html#temp_salinity_water_resistance',
                                                                                             'pyseatrials/general.py'),
                                     'pyseatrials.general.wind_resistance': ( 'general_functions.html#wind_resistance',
                                                                              'pyseatrials/general.py')},
            'pyseatrials.power': { 'pyseatrials.power.calculate_all_values_from_ideal_phase': ( 'power.html#calculate_all_values_from_ideal_phase',
                                                                                                'pyseatrials/power.py'),
                                   'pyseatrials.power.calculate_all_values_from_trial_phase': ( 'power.html#calculate_all_values_from_trial_phase',
                                                                                                'pyseatrials/power.py'),
                                   'pyseatrials.power.correction_delivered_power': ( 'power.html#correction_delivered_power',
                                                                                     'pyseatrials/power.py'),
                                   'pyseatrials.power.delivered_power_ideal_condition': ( 'power.html#delivered_power_ideal_condition',
                                                                                          'pyseatrials/power.py'),
                                   'pyseatrials.power.full_scale_wake_fraction': ( 'power.html#full_scale_wake_fraction',
                                                                                   'pyseatrials/power.py'),
                                   'pyseatrials.power.full_scale_wake_speed': ('power.html#full_scale_wake_speed', 'pyseatrials/power.py'),
                                   'pyseatrials.power.get_curve_coefficient': ('power.html#get_curve_coefficient', 'pyseatrials/power.py'),
                                   'pyseatrials.power.load_factor': ('power.html#load_factor', 'pyseatrials/power.py'),
                                   'pyseatrials.power.load_factor_resistance': ( 'power.html#load_factor_resistance',
                                                                                 'pyseatrials/power.py'),
                                   'pyseatrials.power.open_water_efficiency': ('power.html#open_water_efficiency', 'pyseatrials/power.py'),
                                   'pyseatrials.power.propeller_advance_coefficient': ( 'power.html#propeller_advance_coefficient',
                                                                                        'pyseatrials/power.py'),
                                   'pyseatrials.power.propeller_flow': ('power.html#propeller_flow', 'pyseatrials/power.py'),
                                   'pyseatrials.power.propeller_speed': ('power.html#propeller_speed', 'pyseatrials/power.py'),
                                   'pyseatrials.power.propulsive_efficiency_corr': ( 'power.html#propulsive_efficiency_corr',
                                                                                     'pyseatrials/power.py'),
                                   'pyseatrials.power.quadratic_method': ('power.html#quadratic_method', 'pyseatrials/power.py'),
                                   'pyseatrials.power.scale_correlation_factor': ( 'power.html#scale_correlation_factor',
                                                                                   'pyseatrials/power.py'),
                                   'pyseatrials.power.self_propulsion_factors': ( 'power.html#self_propulsion_factors',
                                                                                  'pyseatrials/power.py'),
                                   'pyseatrials.power.torque_coef': ('power.html#torque_coef', 'pyseatrials/power.py'),
                                   'pyseatrials.power.total_resistance': ('power.html#total_resistance', 'pyseatrials/power.py')},
            'pyseatrials.trig': { 'pyseatrials.trig.adjacent_magnitude_fn': ('trig.html#adjacent_magnitude_fn', 'pyseatrials/trig.py'),
                                  'pyseatrials.trig.combine_vectors': ('trig.html#combine_vectors', 'pyseatrials/trig.py'),
                                  'pyseatrials.trig.find_gamma_fn': ('trig.html#find_gamma_fn', 'pyseatrials/trig.py'),
                                  'pyseatrials.trig.law_of_cosines': ('trig.html#law_of_cosines', 'pyseatrials/trig.py'),
                                  'pyseatrials.trig.opposite_magnitude_fn': ('trig.html#opposite_magnitude_fn', 'pyseatrials/trig.py')},
            'pyseatrials.wave': { 'pyseatrials.wave.R_AWL': ('wave_resistance.html#r_awl', 'pyseatrials/wave.py'),
                                  'pyseatrials.wave._R_AWML': ('wave_resistance.html#_r_awml', 'pyseatrials/wave.py'),
                                  'pyseatrials.wave._R_AWRL': ('wave_resistance.html#_r_awrl', 'pyseatrials/wave.py'),
                                  'pyseatrials.wave._a_1': ('wave_resistance.html#_a_1', 'pyseatrials/wave.py'),
                                  'pyseatrials.wave._alpha_1': ('wave_resistance.html#_alpha_1', 'pyseatrials/wave.py'),
                                  'pyseatrials.wave._b_1': ('wave_resistance.html#_b_1', 'pyseatrials/wave.py'),
                                  'pyseatrials.wave._bar_omega_fn': ('wave_resistance.html#_bar_omega_fn', 'pyseatrials/wave.py'),
                                  'pyseatrials.wave._d_1': ('wave_resistance.html#_d_1', 'pyseatrials/wave.py'),
                                  'pyseatrials.wave._f_1': ('wave_resistance.html#_f_1', 'pyseatrials/wave.py'),
                                  'pyseatrials.wave._r_aw': ('wave_resistance.html#_r_aw', 'pyseatrials/wave.py'),
                                  'pyseatrials.wave.calculate_R_wave': ('wave_resistance.html#calculate_r_wave', 'pyseatrials/wave.py'),
                                  'pyseatrials.wave.modified_pierson_moskowitz_spectrum': ( 'wave_resistance.html#modified_pierson_moskowitz_spectrum',
                                                                                            'pyseatrials/wave.py'),
                                  'pyseatrials.wave.stawave1_fn': ('wave_resistance.html#stawave1_fn', 'pyseatrials/wave.py')},
            'pyseatrials.wind': { 'pyseatrials.wind.double_run_average': ('wind.html#double_run_average', 'pyseatrials/wind.py'),
                                  'pyseatrials.wind.rel2true_dir': ('wind.html#rel2true_dir', 'pyseatrials/wind.py'),
                                  'pyseatrials.wind.rel2true_speed': ('wind.html#rel2true_speed', 'pyseatrials/wind.py'),
                                  'pyseatrials.wind.true2rel_dir': ('wind.html#true2rel_dir', 'pyseatrials/wind.py'),
                                  'pyseatrials.wind.true2rel_speed': ('wind.html#true2rel_speed', 'pyseatrials/wind.py'),
                                  'pyseatrials.wind.vertical_position_anemometer': ( 'wind.html#vertical_position_anemometer',
                                                                                     'pyseatrials/wind.py')},
            'pyseatrials.wind_res': { 'pyseatrials.wind_res.interpolate_cx': ( 'wind_resistance_coef.html#interpolate_cx',
                                                                               'pyseatrials/wind_res.py'),
                                      'pyseatrials.wind_res.load_wind_coefficients': ( 'wind_resistance_coef.html#load_wind_coefficients',
                                                                                       'pyseatrials/wind_res.py')}}}
