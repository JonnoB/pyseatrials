# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_trig.ipynb.

# %% auto 0
__all__ = ['opposite_magnitude_fn', 'adjacent_magnitude_fn', 'law_of_cosines', 'find_gamma_fn']

# %% ../nbs/00_trig.ipynb 4
import numpy as np
import pandas as pd
from fastcore.test import *

# %% ../nbs/00_trig.ipynb 6
def opposite_magnitude_fn(magnitude:float, #The true speed 
                             angle:float, #The angle in radians
                            ):
    "Product of sin and magnitude"
    
    x = magnitude * np.sin(angle)
    
    return x

# %% ../nbs/00_trig.ipynb 9
def adjacent_magnitude_fn(magnitude:float, # The true speed
                             angle:float, # The Ange in radians
                             ):
    
    "Product of cos and magnitude"
    
    x = magnitude * np.cos(angle)
    
    return x

# %% ../nbs/00_trig.ipynb 13
def law_of_cosines(a:float, # side a which is along the x-axis
                   b:float, #side b makes the angle $\theta$ with side a
                   theta:float): #the angle in radians opposite side c
    
    "Finds the length of side c using the angle theta opposite c and the length of the other two sides"
    
    adjacent_component = a - adjacent_magnitude_fn(b, theta)
    opposite_component = - opposite_magnitude_fn(b, theta)
    
    return np.sqrt(adjacent_component**2 + opposite_component**2)

# %% ../nbs/00_trig.ipynb 17
def find_gamma_fn(a:int, #magnitude of a 
                  b:int, #magnitude of b
                  alpha:int, # the angle between b and a in radians
                  constrain_to_positive:bool = False): #Should the function return a value between 0 and 2 pi
    
        adjacent_component = b - adjacent_magnitude_fn(a, alpha)
        opposite_component = opposite_magnitude_fn(a, alpha)
        
        gamma = np.arctan2(opposite_component, adjacent_component)
        
        #prevents negative angles if constrain to positive is true
        #using this method instead of an if statement means the function can perform vectorised operations
        gamma = gamma + 2*np.pi*(gamma<0)*constrain_to_positive
        
        return gamma
