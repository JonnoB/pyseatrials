# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_general_functions.ipynb.

# %% auto 0
__all__ = ['knots_to_ms', 'ms_to_knots', 'wind_resistance', 'temp_salinity_water_resistance']

# %% ../nbs/01_general_functions.ipynb 3
import numpy as np
import pandas as pd
from fastcore.test import *

# %% ../nbs/01_general_functions.ipynb 5
def knots_to_ms(knots:float #the speed in knots
               ) -> float: #speed in m/s
    
    "convert knots to m/s"
    
    return knots/1.943844

# %% ../nbs/01_general_functions.ipynb 6
def ms_to_knots(ms:float #the speed in m/s
               ) -> float: #speed in knots
    
    "convert knots to m/s"
    
    return ms * 1.943844

# %% ../nbs/01_general_functions.ipynb 11
def wind_resistance(air_density:float, #Air density [kg/$m^3$]
                   wind_resistance_coef_rel:float, #the coefficient of wind resistance using the relative angle of the wind
                   wind_resistance_coef_zero:float, #the coefficient of wind resistance using angle 0 radians
                   area:float, #The maximum transverse area of the ship exposed to the wind [m^2]
                   relative_wind_speed:float, #Relative wind speed [m/s]
                   sog:float #speed over ground [m/s]
                   
                  )->float: #Air resistance [N]
    "Calculates the air resistance. N.B. SI units must be used. Do not use knots"
    
    wind_resistance_val = 0.5*air_density*area*(wind_resistance_coef_rel*relative_wind_speed**2 - wind_resistance_coef_zero*sog**2)
    
    return wind_resistance_val

# %% ../nbs/01_general_functions.ipynb 17
def temp_salinity_water_resistance(CF:float, #frictional resistance coefficient for actual water temperature and salinity
                                   CF0:float, #frictional resistance coefficient for reference water temperature and salinity
                                   delta_CF:float, #roughness allowance associated with Reynolds number for actual water temperature and salinity
                                   delta_CF0:float,#roughness allowance associated with Reynolds number for reference water temperature and salinity
                                   CT0:float, #total resistance coefficient for reference water temperature and salinity
                                   #RF:float, #frictional resistance for actual water temperature and salt content [N]
                                   #RF0:float, #frictional resistance for reference water temperature and salt content [N]
                                   #RT0:float, #total resistance for reference water temperature and salt content [N]
                                   S:float, #wetted surface area [m2]
                                   stw:float, #shipâ€™s speed through the water [m/s]
                                   rho_S:float, #water density for actual water temperature and salt content [kg/m3 ]
                                   rho_0:float = 1026 #water density for reference water temperature and salt content                                  
                                  )-> float: #resistance increase due to deviation of water temperature and water density [N]
    
    "Resistance due to water temperature and salinity corrected relative to the reference values"
    
    #This function can be re-written into sub-parts and all the sub-parts ouputted in a results matrix. 
    #Would this be useful?
    RF = 0.5 * rho_S* S * stw**2 * (CF + delta_CF)
    RT0 = 0.5 * rho_0 * S * stw**2 * CT0
    
    RAS =  RT0 * ( rho_S/rho_0 - 1 ) - RF* ( (CF0 + delta_CF0)/(CF + delta_CF) - 1 )
    
    return RAS
    
